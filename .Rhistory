legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")+
labs(x="Matches Played Across all Cricket")
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
animation
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(x="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", year),x=16, y=15), fontface="bold", size=5)+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")+
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(x="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", year),x=16, y=15), fontface="bold", size=5)+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
animation
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(y="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", year),x=16, y=15), fontface="bold", size=5)+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
animation
animate(animation, fps=10)
anim_save("matches_played_race.mp4", animate(animation, fps=10))
runApp()
runApp()
runApp()
make_anim <- function() {
counts_anim <- data_counts %>%
group_by(year, team_1) %>%
reframe(n=sum(n, na.rm=TRUE))
counts_anim <- counts_anim %>% group_by(team_1) %>%
mutate(n=cumsum(n))
counts_anim <- counts_anim %>%
pivot_wider(names_from = team_1,
values_from = n) %>%
fill(-year)
df2 <- counts_anim %>%
gather(key = team_1,
value = n, -year)
df2 <- df2[order(df2$year),]
df_ranked <- df2 %>%
group_by(year) %>%
arrange(year, -n) %>%
mutate(rank = 1:n()) %>%
filter(rank <= 15)
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(y="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", year),x=16, y=15), fontface="bold", size=5)+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
return(animation)
}
a <- make_anim()
myAnimation <- animate(a, duration=10.0, fps=10, width=1400, heigh = 865)
myAnimation <- animate(a, duration=10.0, fps=10, width=1400, height = 865)
anim_save("matches_played_race.gif", animation = myAnimation)
a <- make_anim()
make_anim <- function() {
counts_anim <- data_counts %>%
group_by(year, team_1) %>%
reframe(n=sum(n, na.rm=TRUE))
counts_anim <- counts_anim %>% group_by(team_1) %>%
mutate(n=cumsum(n))
counts_anim <- counts_anim %>%
pivot_wider(names_from = team_1,
values_from = n) %>%
fill(-year)
df2 <- counts_anim %>%
gather(key = team_1,
value = n, -year)
df2 <- df2[order(df2$year),]
df_ranked <- df2 %>%
group_by(year) %>%
arrange(year, -n) %>%
mutate(rank = 1:n()) %>%
filter(rank <= 15)
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(y="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", year),x=16, y=15), fontface="bold", size=5)+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
return(animation)
}
myAnimation <- animate(a, duration=10.0, fps=10, width=1400, height = 865)
anim_save("matches_played_race.gif", animation = myAnimation)
runApp()
runApp()
runApp()
runApp()
myAnimation <- animate(a, duration=10.0, fps=24, width=1400, height = 865)
anim_save("matches_played_race.gif", animation = myAnimation)
runApp()
library(leaflet)
library(leaflet.extras)
library(tidyverse)
library(memoise)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(leafpop)
library(ggplot2)
library(gganimate)
library(extrafont)
make_anim <- function() {
counts_anim <- data_counts %>%
group_by(year, team_1) %>%
reframe(n=sum(n, na.rm=TRUE))
counts_anim <- counts_anim %>% group_by(team_1) %>%
mutate(n=cumsum(n))
counts_anim <- counts_anim %>%
pivot_wider(names_from = team_1,
values_from = n) %>%
fill(-year)
df2 <- counts_anim %>%
gather(key = team_1,
value = n, -year)
df2 <- df2[order(df2$year),]
df_ranked <- df2 %>%
group_by(year) %>%
arrange(year, -n) %>%
mutate(rank = 1:n()) %>%
filter(rank <= 15)
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(y="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=3)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_label(aes(label=sprintf("%1.0f", year),x=16, y=500),size=25, fontface="bold")+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
return(animation)
}
anim <- make_anim()
anim_save("test.gif", anim, duration=20,fps=25)
anim_save("test.gif", anim, duration=20,fps=25, width=1400,height=850)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
create_win_rate_graph <- function(team_1) {
d_wins <- data_wins %>% filter(team==team_1)
d_wins$colour <- lapply(d_wins$gender, genderColour)
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title=team_1, x="Year", y="Win Rate")
return(p)
}
create_win_rate_graph("Australia")
library(leaflet)
library(leaflet.extras)
library(tidyverse)
library(memoise)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(leafpop)
library(ggplot2)
library(gganimate)
library(extrafont)
loadfonts(device = "win")
data <- read.csv("cricsheet_data.csv")
data_wins_1 = data %>% group_by(match.id, winner,match_type) %>%
reframe(team=team_1,gender=gender,
match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
group_by(team, year,match_type,gender) %>% reframe(wins=sum(team==winner),games_played=sum(team==team), match_type=match_type)
data_wins_2 = data %>% group_by(match.id, winner,match_type) %>%
reframe(team=team_2,gender=gender,
match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
group_by(team, year,match_type, gender) %>% reframe(wins=sum(team==winner),games_played=sum(team==team), match_type=match_type)
data_wins = rbind(data_wins_1, data_wins_2) %>% group_by(team, year,match_type, gender) %>%
reframe(wins=sum(wins), games_played=sum(games_played), match_type=match_type) %>%
group_by(team, year,match_type, gender, wins,games_played) %>% tally()
sum_2 <- function(x,y) {
if(is.na(x) && is.na(y)){
return(0)
}
if(is.na(x)){
return(y)
}
if(is.na(y)) {
return(x)
}
return(x+y)
}
data_counts <- read.csv("games_played.csv")
#data_counts$n <- to_vec(for(i in 1:nrow(data_counts)) sum_2(data_counts$n.x[i],data_counts$n.y[i]))
data_runs <- data %>%
reframe(gender=gender, batting=team.batting,runs=runs, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
group_by(gender, batting, year,match_type) %>% summarise(runsAvg=mean(runs))
get_location <- memoise(geocode_OSM)
# data_games = data %>%
#   reframe(gender=gender, id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
#     group_by(id, team_1, team_2,match_type, year, gender) %>% tally()
#
#    data_count <- data_games %>% group_by(team_1, year, match_type, gender) %>% tally()
#    data_count2 <- data_games %>% group_by(team_2, year, match_type, gender) %>% tally()
#   #           reframe(team_1=team_2,gender=gender, year=year,match_type=match_type, n=n)
#     data_count3 <- full_join(x=data_count,y=data_count2, by=join_by(team_1==team_2, year==year, match_type==match_type,
#                                                                     gender==gender)) %>%
#       filter(team_1!="ICC World XI") %>%
#       mutate(n=n.x+n.y)
#
# data_count3$lat = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[1]][1])})
# data_count3$long = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[2]])})
#data_counts <- data_counts %>% group_by(team_1, year.x) %>% reframe(n=sum(n))
func <- function(x) {
if(x == "England") {
return("UK")
}
return(x)
}
data_wins$team = lapply(data_wins$team, func)
data_counts$team_1 <- lapply(data_counts$team_1, func)
data_runs$batting <- lapply(data_runs$batting, func)
create_win_rate_graph("Australia")
genderColour <- colorFactor(palette = c("pink", "steelblue1"), domain=c("female", "male"))
create_win_rate_graph("Australia")
d_wins <- data_wins %>% filter(team=="Australia")
d_wins$colour <- lapply(d_wins$gender, genderColour)
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title=team_1, x="Year", y="Win Rate")
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title="Australia", x="Year", y="Win Rate")
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title="Australia", x="Year", y="Win Rate")
p
create_win_rate_graph <- function(team_1) {
d_wins <- data_wins %>% filter(team==team_1)
d_wins$colour <- lapply(d_wins$gender, genderColour)
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, group=gender, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title=team_1, x="Year", y="Win Rate")
return(p)
}
create_win_rate_graph("Australia")
create_win_rate_graph <- function(team_1) {
d_wins <- data_wins %>% filter(team==team_1)
d_wins$colour <- lapply(d_wins$gender, genderColour)
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, group=gender, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title=team_1, x="Year", y="Win Rate")+abline(y=0.5)
return(p)
}
create_win_rate_graph("Australia")
create_win_rate_graph <- function(team_1) {
d_wins <- data_wins %>% filter(team==team_1)
d_wins$colour <- lapply(d_wins$gender, genderColour)
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, group=gender, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title=team_1, x="Year", y="Win Rate")+abline(h=0.5)
return(p)
}
create_win_rate_graph("Australia")
create_win_rate_graph <- function(team_1) {
d_wins <- data_wins %>% filter(team==team_1)
d_wins$colour <- lapply(d_wins$gender, genderColour)
p <- ggplot(d_wins, aes(x=as.numeric(year), y=wins/games_played, group=gender, fill=colour, color=colour))+
scale_colour_identity()+
geom_smooth()+labs(title=team_1, x="Year", y="Win Rate")+
geom_abline(yintercept=0.5, colour="black")
create_win_rate_graph("Australia")
""
View(data_counts)
shiny::runApp()
View(data_counts)
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data %>% filter(team_1=="Panama")
data %>% filter(team_2=="Panama")
worldMap <- map("world", fill = TRUE, plot = FALSE)
worldMap
runApp()
runApp()
runApp()
?dashboardPage
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
make_anim <- function() {
counts_anim <- data_counts %>%
group_by(year, team_1) %>%
reframe(n=sum(n, na.rm=TRUE))
counts_anim <- counts_anim %>% group_by(team_1) %>%
mutate(n=cumsum(n))
counts_anim <- counts_anim %>%
pivot_wider(names_from = team_1,
values_from = n) %>%
fill(-year)
df2 <- counts_anim %>%
gather(key = team_1,
value = n, -year)
df2 <- df2[order(df2$year),]
df_ranked <- df2 %>%
group_by(year) %>%
arrange(year, -n) %>%
mutate(rank = 1:n()) %>%
filter(rank <= 15)
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(y="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=5)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_label(aes(label=sprintf("%1.0f", year),x=16, y=500),size=25, fontface="bold")+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text = element_text(size=10),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")+expand_limits(x=-10)
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
return(animation)
}
anim <- make_anim()
library(leaflet)
library(leaflet.extras)
library(tidyverse)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(ggplot2)
library(ggnewscale)
library(gganimate)
make_anim <- function() {
counts_anim <- data_counts %>%
group_by(year, team_1) %>%
reframe(n=sum(n, na.rm=TRUE))
counts_anim <- counts_anim %>% group_by(team_1) %>%
mutate(n=cumsum(n))
counts_anim <- counts_anim %>%
pivot_wider(names_from = team_1,
values_from = n) %>%
fill(-year)
df2 <- counts_anim %>%
gather(key = team_1,
value = n, -year)
df2 <- df2[order(df2$year),]
df_ranked <- df2 %>%
group_by(year) %>%
arrange(year, -n) %>%
mutate(rank = 1:n()) %>%
filter(rank <= 15)
chart <- ggplot(df_ranked, aes(rank, n))+
geom_bar(stat="identity", aes(fill=team_1))+
coord_flip()+
scale_x_reverse()+
labs(y="Matches Played Across all Cricket")+
geom_text(aes(rank, y=0, label=team_1),
hjust=0,colour="black",family="sans", fontface="bold", size=5)+
geom_text(aes(label=sprintf("%1.0f", n)),
hjust=1.1, fontface="bold", size=3)+
geom_label(aes(label=sprintf("%1.0f", year),x=16, y=500),size=25, fontface="bold")+
theme_minimal()+
theme(pane.grid=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text = element_text(size=10),
legend.position = "none",
plot.margin = margin(1,6,1,6), "cm")+expand_limits(x=-10)
animation <- chart +
transition_states(year, transition_length=5, state_length=5)+
ease_aes('linear')
return(animation)
}
anim <- make_anim()
anim
shiny::runApp()
runApp()
