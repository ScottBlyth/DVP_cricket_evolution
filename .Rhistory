View(data_games)
data_count <- data_games %>% group_by(team_1, year, match_type)
data_count <- data_games %>% group_by(team_1, year, match_type) %>% reframe()
View(data_count)
View(data_games)
View(data_games)
data <- read.csv("cricsheet_data.csv")
data_counts <- read.csv("games_played.csv")
get_location <- memoise(geocode_OSM)
data_games = data %>%
reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
group_by(id, team_1, team_2,match_type) %>% tally()
View(data_games)
data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally() %>% reframe(n=n)
rlang::last_trace()
data_games = data %>%
reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
group_by(id, team_1, team_2,match_type, year) %>% tally()
data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally() %>% reframe(n=n)
data_games = data %>%
reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
group_by(id, team_1, team_2,match_type, year) %>% tally()
View(data_count)
View(data_games)
data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally()
View(data_count)
View(data_count)
View(data_count2)
data_count2 <- data_games %>% group_by(team_2, year, match_type) %>% tally()
%>% reframe(team_1=team_2, year=year,match_type=match_type, n=n)
data_count2 <- data_games %>% group_by(team_2, year, match_type) %>% tally() %>%
reframe(team_1=team_2, year=year,match_type=match_type, n=n)
View(data_count2)
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type=match_type, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
reframe(n=n.x+n.y)
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type==match_type, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
reframe(n=n.x+n.y)
data_count3 <- merge(x=data_count, y=data_count2, by="match_type", by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type==match_type, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
reframe(n=n.x+n.y
)
data_count3 <- merge(x=data_count, y=data_count2, by="match_type", by.x="team_1", by.y="team_1", all = TRUE)
View(data_counts)
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE)
View(data_count3)
View(data_count3)
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
reframe(n=n.x+n.y)
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type.x) %>%
reframe(n=n.x+n.y)
View(data_count3)
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type==match_type, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
reframe(n=n.x+n.y, lat=get_location(team_1)$coords[[1]], long=get_location(team_1)$coords[[2]])
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type==match_type, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type.x) %>%
reframe(n=n.x+n.y, lat=get_location(team_1)$coords[[1]], long=get_location(team_1)$coords[[2]])
data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type.x) %>%
reframe(n=n.x+n.y, lat=get_location(team_1)$coords[[1]], long=get_location(team_1)$coords[[2]])
View(data_count3)
write.csv(data_count3, "games_played.csv")
runApp()
runApp()
runApp()
runApp()
d <- merge(worldMap, data_counts)
worldMap <- map("world", fill = TRUE, plot = FALSE)
View(worldMap)
d <- merge(worldMap, data_counts)
data_counts <- read.csv("games_played.csv")
d <- merge(worldMap, data_counts)
leaflet(worldMap, data=data_counts)
library(leaflet)
leaflet(worldMap, data=data_counts)
?addPopupGraphs
?addCircleMarkers
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot2(data_counts_team, aes(x=as.numeric(year.x), y=n))+geom_line()
}
create_games_played_graph ("Australia")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x), y=n))+geom_line()
}
create_games_played_graph ("Australia")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot2(data_counts_team, aes(x=as.numeric(year.x), y=n))+geom_line()
return(p)
}
create_games_played_graph ("Australia")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x), y=n))+geom_line()
return(p)
}
create_games_played_graph ("Australia")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x), y=n))+geom_smooth()
return(p)
}
create_games_played_graph ("Australia")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x), y=n,color=match_type.x))+geom_smooth()
return(p)
}
create_games_played_graph ("Australia")
create_games_played_graph ("Canada")
create_games_played_graph ("UK")
create_games_played_graph ("England")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),color=match_type.x))+geom_bar()
return(p)
}
create_games_played_graph ("England")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),fill=match_type.x))+geom_bar(stat="count")
return(p)
}
create_games_played_graph ("England")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,fill=match_type.x))+geom_bar()
return(p)
}
create_games_played_graph ("England")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,fill=match_type.x))+geom_histogram()
return(p)
}
create_games_played_graph ("England")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,fill=match_type.x))+geom_point()
return(p)
}
create_games_played_graph ("England")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
create_games_played_graph ("England")
graphs <- lapply(data_counts$team_1, create_games_played_graph)
runApp()
runApp()
game_graphs <- lapply(counts_smaller$team_1, create_games_played_graph)
counts_smaller <- data_counts %>% group_by(team_1) %>% reframe()
game_graphs <- lapply(counts_smaller$team_1, create_games_played_graph)
runApp()
runApp()
runApp()
runApp()
View(data_counts)
runApp()
runApp()
runApp()
runApp()
runApp()
create_games_played_graph = function(data, team) {
data_counts_team <- data %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
runApp()
runApp()
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(memoise)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(leafpop)
library(ggplot2)
data <- read.csv("cricsheet_data.csv")
data_counts <- read.csv("games_played.csv")
get_location <- memoise(geocode_OSM)
# data_games = data %>%
#           reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
#           group_by(id, team_1, team_2,match_type, year) %>% tally()
#
#
# data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally() %>% reframe(n=n)
# data_count2 <- data_games %>% group_by(team_2, year, match_type) %>% tally() %>%
#           reframe(team_1=team_2, year=year,match_type=match_type, n=n)
# data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
#   filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
#   reframe(n=n.x+n.y, lat=get_location(team_1)$coords[1], long=get_location(team_1)$coords[2])
#
# data_count3$lat = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[1]][1])})
# data_count3$long = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[2]])})
#data_counts <- data_counts %>% group_by(team_1, year.x) %>% reframe(n=sum(n))
func <- function(x) {
if(x == "England") {
return("UK")
}
return(x)
}
splitNames <- strsplit(worldMap$names, ":")
worldMap <- map("world", fill = TRUE, plot = FALSE)
# taken from week 4 moodle content
splitNames <- strsplit(worldMap$names, ":")
firstPartNames <- lapply(splitNames, function(x) x[1])
cpal = colorNumeric("RdBu",data_counts$n, reverse=TRUE)
game_types = c("T20", "ODI", "Test")
create_games_played_graph = function(data, team) {
data_counts_team <- data %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
create_games_played_graph(data_counts, "Australia")
create_games_played_graph(data_counts, "Australia")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
create_games_played_graph("Australia")
View(data_counts)
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
create_games_played_graph("England")
data_counts_team <- data_counts %>% filter(team_1==team)
data_counts_team <- data_counts %>% filter(team_1=="Australia")
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
p
plot(p)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(memoise)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(leafpop)
library(ggplot2)
?addPopupGraphs
shiny::runApp()
runApp()
counts_smaller <- data_counts %>% filter(team_1=="Australia") %>% group_by(team_1) %>% reframe()
counts_smaller$graphs <- lapply(counts_smaller$team_1, create_games_played_graph)
team_names <- counts_smaller$team_1[match(firstPartNames, counts_smaller$team_1)]
game_graphs = counts_smaller$graphs[match(firstPartNames, counts_smaller$team_1)]
data <- read.csv("cricsheet_data.csv")
data_counts <- read.csv("games_played.csv")
get_location <- memoise(geocode_OSM)
# data_games = data %>%
#           reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
#           group_by(id, team_1, team_2,match_type, year) %>% tally()
#
#
# data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally() %>% reframe(n=n)
# data_count2 <- data_games %>% group_by(team_2, year, match_type) %>% tally() %>%
#           reframe(team_1=team_2, year=year,match_type=match_type, n=n)
# data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
#   filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
#   reframe(n=n.x+n.y, lat=get_location(team_1)$coords[1], long=get_location(team_1)$coords[2])
#
# data_count3$lat = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[1]][1])})
# data_count3$long = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[2]])})
#data_counts <- data_counts %>% group_by(team_1, year.x) %>% reframe(n=sum(n))
func <- function(x) {
if(x == "England") {
return("UK")
}
return(x)
}
data_counts$team_1 <- lapply(data_counts$team_1, func)
worldMap <- map("world", fill = TRUE, plot = FALSE)
# taken from week 4 moodle content
splitNames <- strsplit(worldMap$names, ":")
firstPartNames <- lapply(splitNames, function(x) x[1])
cpal = colorNumeric("RdBu",data_counts$n, reverse=TRUE)
game_types = c("T20", "ODI", "Test")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
counts_smaller <- data_counts %>% filter(team_1=="Australia") %>% group_by(team_1) %>% reframe()
counts_smaller$graphs <- lapply(counts_smaller$team_1, create_games_played_graph)
team_names <- counts_smaller$team_1[match(firstPartNames, counts_smaller$team_1)]
game_graphs = counts_smaller$graphs[match(firstPartNames, counts_smaller$team_1)]
View(counts_smaller)
counts_smaller <- data_counts %>% group_by(team_1) %>% reframe()
counts_smaller$graphs <- lapply(counts_smaller$team_1, create_games_played_graph)
team_names <- counts_smaller$team_1[match(firstPartNames, counts_smaller$team_1)]
game_graphs = counts_smaller$graphs[match(firstPartNames, counts_smaller$team_1)]
View(team_names)
runApp()
data_counts$n[match(firstPartNames,data_counts$team_1)]
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("leaflet.extreas")
install.packages("leaflet.extras")
runApp()
install.packages("comprehenr")
runApp()
install.packages("leafpop")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
create_games_played_graph("Australia")
runApp()
runApp()
?leafletOutput
runApp()
runApp()
runApp()
runApp()
runApp()
?addPopupGraphs
runApp()
list(create_games_played_graph("Australia"))
runApp()
View(counts_smaller)
counts_smaller <- data_counts %>% filter(team_1=="Australia") %>% group_by(team_1, lat, long) %>% reframe()
View(counts_smaller)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(memoise)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(leafpop)
library(ggplot2)
data <- read.csv("cricsheet_data.csv")
data_counts <- read.csv("games_played.csv")
get_location <- memoise(geocode_OSM)
# data_games = data %>%
#           reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
#           group_by(id, team_1, team_2,match_type, year) %>% tally()
#
#
# data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally() %>% reframe(n=n)
# data_count2 <- data_games %>% group_by(team_2, year, match_type) %>% tally() %>%
#           reframe(team_1=team_2, year=year,match_type=match_type, n=n)
# data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
#   filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
#   reframe(n=n.x+n.y, lat=get_location(team_1)$coords[1], long=get_location(team_1)$coords[2])
#
# data_count3$lat = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[1]][1])})
# data_count3$long = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[2]])})
#data_counts <- data_counts %>% group_by(team_1, year.x) %>% reframe(n=sum(n))
func <- function(x) {
if(x == "England") {
return("UK")
}
return(x)
}
data_counts$team_1 <- lapply(data_counts$team_1, func)
worldMap <- map("world", fill = TRUE, plot = FALSE)
# taken from week 4 moodle content
splitNames <- strsplit(worldMap$names, ":")
firstPartNames <- lapply(splitNames, function(x) x[1])
cpal = colorNumeric("RdBu",data_counts$n, reverse=TRUE)
game_types = c("T20", "ODI", "Test")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()
return(p)
}
counts_smaller <- data_counts %>% filter(team_1=="Australia") %>% group_by(team_1, lat, long) %>% reframe()
counts_smaller <- data_counts %>% filter(team_1=="Australia") %>% group_by(team_1) %>% reframe()
counts_smaller <- data_counts %>% group_by(team_1, lat,long) %>% reframe()
View(counts_smaller)
runApp()
runApp()
runApp()
View(data_counts)
counts_smaller <- data_counts %>% filter(team_1 %in% c("Australia", "UK", "India",
"New Zealand", "South Africa", "Pakistan"))
View(counts_smaller)
runApp()
runApp()
runApp()
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(memoise)
library(tmaptools)
library(sf)
library(maps)
library(RColorBrewer)
library(comprehenr)
library(leafpop)
library(ggplot2)
data <- read.csv("cricsheet_data.csv")
data_counts <- read.csv("games_played.csv")
get_location <- memoise(geocode_OSM)
# data_games = data %>%
#           reframe(id=match.id, team_1=team_1, team_2=team_2, match_type=match_type,year=format(as.Date(start.date, "%Y-%m-%d"), "%Y")) %>%
#           group_by(id, team_1, team_2,match_type, year) %>% tally()
#
#
# data_count <- data_games %>% group_by(team_1, year, match_type) %>% tally() %>% reframe(n=n)
# data_count2 <- data_games %>% group_by(team_2, year, match_type) %>% tally() %>%
#           reframe(team_1=team_2, year=year,match_type=match_type, n=n)
# data_count3 <- merge(x=data_count, y=data_count2, by.x="team_1", by.y="team_1", all = TRUE) %>%
#   filter(year.x==year.y,match_type.x==match_type.y, team_1!="ICC World XI") %>% group_by(team_1, year.x, match_type) %>%
#   reframe(n=n.x+n.y, lat=get_location(team_1)$coords[1], long=get_location(team_1)$coords[2])
#
# data_count3$lat = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[1]][1])})
# data_count3$long = apply(data_count3$team_1, function(x) {return(get_location(x)$coords[[2]])})
#data_counts <- data_counts %>% group_by(team_1, year.x) %>% reframe(n=sum(n))
func <- function(x) {
if(x == "England") {
return("UK")
}
return(x)
}
data_counts$team_1 <- lapply(data_counts$team_1, func)
worldMap <- map("world", fill = TRUE, plot = FALSE)
# taken from week 4 moodle content
splitNames <- strsplit(worldMap$names, ":")
firstPartNames <- lapply(splitNames, function(x) x[1])
cpal = colorNumeric("RdBu",data_counts$n, reverse=TRUE)
game_types = c("T20", "ODI", "Test")
create_games_played_graph = function(team) {
data_counts_team <- data_counts %>% filter(team_1==team)
p <- ggplot(data_counts_team, aes(x=as.numeric(year.x),y=n,colour=match_type.x))+geom_point()+
labs(title=team)
return(p)
}
counts_smaller <- data_counts %>% filter(team_1 %in% c("Australia", "UK", "India",
"New Zealand", "South Africa", "Pakistan")) %>%
group_by(team_1, lat,long) %>% reframe()
counts_smaller$graphs <- lapply(counts_smaller$team_1, create_games_played_graph)
team_names <- counts_smaller$team_1[match(firstPartNames, counts_smaller$team_1)]
game_graphs = counts_smaller$graphs[match(firstPartNames, counts_smaller$team_1)]
team_long = counts_smaller$lat[match(firstPartNames, counts_smaller$team_1)]
team_lat = counts_smaller$long[match(firstPartNames, counts_smaller$team_1)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletOutput
runApp()
runApp()
